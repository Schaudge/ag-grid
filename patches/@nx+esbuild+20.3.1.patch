diff --git a/node_modules/@nx/esbuild/src/executors/esbuild/lib/build-esbuild-options.js b/node_modules/@nx/esbuild/src/executors/esbuild/lib/build-esbuild-options.js
index 38a9c4b..fd192de 100644
--- a/node_modules/@nx/esbuild/src/executors/esbuild/lib/build-esbuild-options.js
+++ b/node_modules/@nx/esbuild/src/executors/esbuild/lib/build-esbuild-options.js
@@ -104,22 +104,25 @@ function buildEsbuildOptions(format, options, context) {
     return esbuildOptions;
 }
 function getOutExtension(format, options) {
-    const userDefinedExt = options.userDefinedBuildOptions?.outExtension?.['.js'];
+    const userDefExts = options.userDefinedBuildOptions?.outExtension ?? {};
+
     // Allow users to change the output extensions from default CJS and ESM extensions.
     // CJS -> .js
     // ESM -> .mjs
-    return userDefinedExt === '.js' && format === 'cjs'
-        ? '.js'
-        : userDefinedExt === '.mjs' && format === 'esm'
-            ? '.mjs'
-            : format === 'esm'
-                ? ESM_FILE_EXTENSION
-                : CJS_FILE_EXTENSION;
+    const defaultExt = format === 'cjs' ? CJS_FILE_EXTENSION : format === 'esm' ? ESM_FILE_EXTENSION : '.js';
+    if (userDefExts[defaultExt]) {
+        return userDefExts[defaultExt];
+    }
+
+    return defaultExt;
 }
 function getOutfile(format, options, context) {
-    const ext = getOutExtension(format, options);
     const candidate = (0, devkit_1.joinPathFragments)(context.target.options.outputPath, options.outputFileName);
-    const { dir, name } = path.parse(candidate);
+    const { dir, name, ext } = path.parse(candidate);
+    if (!['js', 'mjs', 'cjs'].includes(ext)) {
+        const defaultExt = getOutExtension(format, options);
+        return `${dir}/${name}${defaultExt}`;
+    }
     return `${dir}/${name}${ext}`;
 }
 function writeTmpEntryWithRequireOverrides(paths, outExtension, options, context) {
